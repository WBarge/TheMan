{
  "_args": [
    [
      {
        "raw": "worker-plugin@4.0.3",
        "scope": null,
        "escapedName": "worker-plugin",
        "name": "worker-plugin",
        "rawSpec": "4.0.3",
        "spec": "4.0.3",
        "type": "version"
      },
      "E:\\DevUIArea\\angular-product-setup\\node_modules\\@angular-devkit\\build-angular"
    ]
  ],
  "_from": "worker-plugin@4.0.3",
  "_hasShrinkwrap": false,
  "_id": "worker-plugin@4.0.3",
  "_location": "/worker-plugin",
  "_nodeVersion": "12.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/worker-plugin_4.0.3_1588370439451_0.44491622092236005"
  },
  "_npmUser": {
    "name": "developit",
    "email": "jason@developit.ca"
  },
  "_npmVersion": "6.13.4",
  "_phantomChildren": {
    "big.js": "5.2.2",
    "emojis-list": "3.0.0",
    "minimist": "1.2.5"
  },
  "_requested": {
    "raw": "worker-plugin@4.0.3",
    "scope": null,
    "escapedName": "worker-plugin",
    "name": "worker-plugin",
    "rawSpec": "4.0.3",
    "spec": "4.0.3",
    "type": "version"
  },
  "_requiredBy": [
    "/@angular-devkit/build-angular"
  ],
  "_resolved": "https://registry.npmjs.org/worker-plugin/-/worker-plugin-4.0.3.tgz",
  "_shasum": "7c42e600d5931ad154d3d5f187a32446df64db0f",
  "_shrinkwrap": null,
  "_spec": "worker-plugin@4.0.3",
  "_where": "E:\\DevUIArea\\angular-product-setup\\node_modules\\@angular-devkit\\build-angular",
  "author": {
    "name": "The Chromium Authors"
  },
  "babel": {
    "plugins": [
      "transform-es2015-modules-commonjs"
    ]
  },
  "bugs": {
    "url": "https://github.com/GoogleChromeLabs/worker-plugin/issues"
  },
  "contributors": [
    {
      "name": "Jason Miller",
      "email": "developit@google.com"
    }
  ],
  "dependencies": {
    "loader-utils": "^1.1.0"
  },
  "description": "Webpack plugin to bundle Workers automagically.",
  "devDependencies": {
    "@file-services/memory": "^1.0.3",
    "@file-services/node": "^1.0.3",
    "@file-services/overlay": "^1.0.3",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.26.2",
    "clean-webpack-plugin": "^1.0.0",
    "eslint": "^5.9.0",
    "eslint-config-standard": "^12.0.0",
    "eslint-plugin-import": "^2.14.0",
    "eslint-plugin-node": "^8.0.0",
    "eslint-plugin-promise": "^4.0.1",
    "eslint-plugin-standard": "^4.0.0",
    "jest": "^23.6.0",
    "memory-fs": "^0.4.1",
    "microbundle": "^0.8.2",
    "puppeteer": "^3.0.2",
    "serve-handler": "^5.0.7",
    "terser-webpack-plugin": "^1.1.0",
    "webpack": "^4.26.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-7hFDYWiKcE3yHZvemsoM9lZis/PzurHAEX1ej8PLCu818Rt6QqUAiDdxHPCKZctzmhqzPpcFSgvMCiPbtooqAg==",
    "shasum": "7c42e600d5931ad154d3d5f187a32446df64db0f",
    "tarball": "https://registry.npmjs.org/worker-plugin/-/worker-plugin-4.0.3.tgz",
    "fileCount": 13,
    "unpackedSize": 58998,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJerJwHCRA9TVsSAnZWagAASVYQAJSagjZfJ5ro7B2wj6K2\nDzWDvyHoP0B9uG9MjKINibGp0HvBrMixtfeXWUOG1hltkNjoSRtzj4sso+Iz\nSjvULw5qKrKCfszi8k4bZ7o+620sWWFbOF+LJlKZqwEMN/6IzZ39zH62Q23K\n0tQN4IucT4cWwBPGztQ/pbT/1EaJ8828aCzwIvQLctxvYFoxZvABhXTvaK4s\nCBWHjEJJTdN0tC208wOfdsiodIU3AH/YYdxAgS2Xtt0zhDlX3EnSuCk7YNHh\nDNEwl4/gYf1kopMVmeXFeHefnOOhoFJDVwIMcgizjP7016iYkjsVJfgvbBH0\nOOPJ0B5MtOHv0ZyQerYJM6eIHCxO7ApWA3qAZW2Z+PN9LfXWgVFnRscYZbxF\nTwOyMGw0N0sUbuZutJ7MlRZ2nRhBARprMaLyn5f6tIwS6ZHYvL5y6ymHMvgZ\nwS4pwLTp1PeZhdCwZ9FE/OICfZueElfyuXbRTznBwZFk92OfdUi1M532uCgt\nzIA/fSNVYIkojZ+LjrpS6zZuDqUxG2yllB9OXrOd1RMnKWAH5+oWL7wrouzz\n4/w47Kw9yb2eaptPCnCQWNhSNnZgYOf4DEOJ31+KYI/lYOrSh9FC13SjCq97\nCSvwTeOlREPgaUJhsQFU17eGcH2zbc2ki1xz11RfOYzHaslNB2sb1/RmiOUY\nS5Cb\r\n=xN8F\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eslintConfig": {
    "extends": "eslint-config-standard",
    "env": {
      "browser": true,
      "jest": true
    },
    "rules": {
      "indent": [
        "error",
        2
      ],
      "semi": [
        "error",
        "always"
      ]
    }
  },
  "files": [
    "src",
    "dist",
    "loader.js"
  ],
  "gitHead": "4978c710e9eb6095e6e5b630f739aae014bcadc8",
  "homepage": "https://github.com/GoogleChromeLabs/worker-plugin#readme",
  "jest": {
    "watchPathIgnorePatterns": [
      "<rootDir>/node_modules/",
      "<rootDir>/test/fixtures/"
    ]
  },
  "keywords": [
    "webpack",
    "plugin",
    "worker",
    "web worker",
    "thread"
  ],
  "license": "Apache-2.0",
  "main": "dist/worker-plugin.js",
  "maintainers": [
    {
      "name": "developit",
      "email": "jason@developit.ca"
    }
  ],
  "name": "worker-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": ">= 4"
  },
  "readme": "<p align=\"center\">\n  <img src=\"https://i.imgur.com/MlrAQjl.jpg\" width=\"1000\" alt=\"worker-plugin\">\n</p>\n<h1 align=\"center\">üë©‚Äçüè≠ worker-plugin</h1>\n<p align=\"center\">Automatically bundle & compile Web Workers within Webpack.</p>\n\n\n### Features\n\nAutomatically compiles modules loaded in Web Workers:\n\n```js\nconst worker = new Worker('./foo.js', { type: 'module' });\n                          ^^^^^^^^^^\n                          gets bundled using webpack\n```\n\nThe best part? That worker constructor works just fine without bundling turned on, but when bundled the result is **supported in all browsers** that support Web Workers - all the way back to IE 10!\n\nWorkers with fully dynamic URLs, Blob URLs, data URLs or with no `{ type:'module' }` option are left unchanged.\n\n## Installation\n\n```sh\nnpm install -D worker-plugin\n```\n\nThen drop it into your **webpack.config.js:**\n\n```diff\n+ const WorkerPlugin = require('worker-plugin');\n\nmodule.exports = {\n  <...>\n  plugins: [\n+    new WorkerPlugin()\n  ]\n  <...>\n}\n```\n\n## Usage\n\n**worker.js**: _(our worker module)_\n\n```js\n// This is a module worker, so we can use imports (in the browser too!)\nimport { calculatePi } from './some-other-module';\n\naddEventListener('message', event => {\n  postMessage(calculatePi(event.data));\n});\n```\n\n**main.js**: _(our demo, on the main thread)_\n\n```js\nconst piWorker = new Worker('./worker.js', { type: 'module' });\npiWorker.onmessage = event => {\n  console.log('pi: ' + event.data);\n};\npiWorker.postMessage(42);\n```\n\n> **Note:** in order to ensure WorkerPlugin bundles your worker, make sure you're passing a **string** URL/filename to the Worker constructor. WorkerPlugin cannot bundle workers with dynamic/variable filenames, Blob or data URLs - it will leave them unmodified and print a warning during your build.\n\n## Options\n\nIn most cases, no options are necessary to use WorkerPlugin.\n\n### `globalObject` _(string | false)_\n\nWorkerPlugin will print a warning if your Webpack configuration has `output.globalObject` set to `window`, since doing so breaks Hot Module Replacement in web workers.\n\nIf you're not using HMR and want to disable this warning, pass `globalObject:false`:\n\n```js\nnew WorkerPlugin({\n  // disable warnings about \"window\" breaking HMR:\n  globalObject: false\n})\n```\n\nTo configure the value of `output.globalObject` for WorkerPlugin's internal Webpack Compiler, set `globalObject` to any String:\n\n```js\nnew WorkerPlugin({\n  // use \"self\" as the global object when receiving hot updates.\n  globalObject: 'self' // <-- this is the default value\n})\n```\n\n### `plugins` _(array)_\n\nBy default, WorkerPlugin doesn't run any of your configured Webpack plugins when bundling worker code - this avoids running things like `html-webpack-plugin` twice. For cases where it's necessary to apply a plugin to Worker code, use the `plugins` option.\n\nHere you can specify the names of plugins to \"copy\" from your existing Webpack configuration, or provide specific plugins to apply only to worker code:\n\n```js\nmodule.exports = {\n  <...>\n  plugins: [\n    // an example of a plugin already being used:\n    new SomeExistingPlugin({ <...> }),\n\n    new WorkerPlugin({\n      plugins: [\n        // A string here will copy the named plugin from your configuration:\n        'SomeExistingPlugin',\n        \n        // Or you can specify a plugin directly, only applied to Worker code:\n        new SomePluginToApplyOnlyToWorkers({ <...> })\n      ]\n    })\n  ]\n  <...>\n}\n```\n\n### `sharedWorker` _(boolean)_\n\nIf set to `true`, this option enables the bundling of [SharedWorker](https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker):\n\n```js\nconst shared = new SharedWorker('./my-shared-worker.js', { type: 'module' });\n```\n\n### `worker` _(boolean)_\n\nIf set to `false`, this option disables the bundling of [Worker]. Intended to be used with `{ sharedWorker: true }` to allow bundling of [SharedWorker] only without also bundling [Worker].\n\n### `preserveTypeModule` _(boolean)_\n### `workerType` _(string)_\n\nNormally, WorkerPlugin will transform `new Worker('./a.js', { type: 'module' })` to completely remove the `type` option, outputting something like `new Worker('a.worker.js')`. This allows the plugin to compile Module Workers to Classic Workers, which are supported in all browsers.\n\nTo instead retain `{type:'module'}` in bundled output, set the `preserveTypeModule` option to `true`:\n\n```js\n  plugins: [\n    new WorkerPlugin({\n      preserveTypeModule: true\n    })\n  ]\n```\n\nSimilarly, if you need to have WorkerPlugin output a specific `type` value, use the `workerType` option to spefify it:\n\n```js\n  plugins: [\n    new WorkerPlugin({\n      workerType: 'foo'  // note: this isn't a thing!\n    })\n  ]\n```\n\n## Loader\n\nAt its core, worker-plugin provides two features: parsing and handling of `new Worker()`, and standalone bundling of modules for use in a different JavaScript context.\n\nIf all you want is to compile separate bundles for a module, `worker-plugin/loader` provides the bundling functionality of worker-plugin as a standalone Webpack loader. This is useful for generating bundles for use in iframes, Service Workers or Worklets. Applying `worker-plugin/loader` to an import will bundle that module and return its URL:\n\n```js\nimport workerUrl from 'worker-plugin/loader!./my-worker';\n\nconsole.log(workerUrl); // \"/0.worker.js\"\n\nCSS.paintWorklet.addModule(workerUrl);\n```\n\nTwo options are available:\n\n| Option | Type | Description\n|---|---|:--|\n| `name` | _string_ | Controls the name of the generated chunk.<br>The name is used to generate a URL according to  `output.chunkFilename`.\n| `esModule` | _boolean_ | Export the URL from an ES Module (`export default url`).<br>The default is CommonJS (`module.exports = url`).\n\nOptions can be supplied inline:\n\n```js\nimport url from 'worker-plugin/loader?name=foo&esModule!./foo';\n```\n\n... or by setting up a loader alias:\n\n```js\n// webpack.config.js to enable this:\n// import url from 'worker!./foo';\n{\n  resolveLoader: {\n    alias: {\n      worker: 'worker-plugin/loader?esModule'\n    }\n  }\n}\n```\n\n\n## License\n\nApache-2.0\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/GoogleChromeLabs/worker-plugin.git"
  },
  "scripts": {
    "build": "microbundle --raw --inline none --format cjs --no-compress src/*.js",
    "dev": "jest --verbose --watchAll",
    "prepack": "npm run build",
    "release": "npm t && git commit -am $npm_package_version && git tag $npm_package_version && git push && git push --tags && npm publish",
    "test": "npm run build && jest --verbose"
  },
  "version": "4.0.3"
}
