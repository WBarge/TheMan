{"version":3,"file":"primeng-terminal.umd.js","sources":["ng:/primeng/terminal/terminalservice.ts","ng:/primeng/terminal/terminal.ts"],"names":["Subject","Injectable","DomHandler","ElementRef","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","NgModule","CommonModule","FormsModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class TerminalService {\n    \n    private commandSource = new Subject<string>();\n    private responseSource = new Subject<string>();\n    \n    commandHandler = this.commandSource.asObservable();\n    responseHandler = this.responseSource.asObservable();\n    \n    sendCommand(command: string) {\n        if (command) {\n            this.commandSource.next(command);\n        }\n    }\n    \n    sendResponse(response: string) {\n        if (response) {\n            this.responseSource.next(response);\n        }\n    }\n}","import {NgModule,Component,AfterViewInit,AfterViewChecked,OnDestroy,Input,ElementRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler} from 'primeng/dom';\nimport {TerminalService} from './terminalservice';\nimport {Subscription}   from 'rxjs';\n\n@Component({\n    selector: 'p-terminal',\n    template: `\n        <div [ngClass]=\"'p-terminal p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"focus(in)\">\n            <div *ngIf=\"welcomeMessage\">{{welcomeMessage}}</div>\n            <div class=\"p-terminal-content\">\n                <div *ngFor=\"let command of commands\">\n                    <span class=\"p-terminal-prompt\">{{prompt}}</span>\n                    <span class=\"p-terminal-command\">{{command.text}}</span>\n                    <div class=\"p-terminal-response\">{{command.response}}</div>\n                </div>\n            </div>\n            <div class=\"p-terminal-prompt-container\">\n                <span class=\"p-terminal-content-prompt\">{{prompt}}</span>\n                <input #in type=\"text\" [(ngModel)]=\"command\" class=\"p-terminal-input\" autocomplete=\"off\" (keydown)=\"handleCommand($event)\" autofocus>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./terminal.css']\n})\nexport class Terminal implements AfterViewInit,AfterViewChecked,OnDestroy {\n\n    @Input() welcomeMessage: string;\n\n    @Input() prompt: string;\n        \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n            \n    commands: any[] = [];\n    \n    command: string;\n    \n    container: Element;\n    \n    commandProcessed: boolean;\n    \n    subscription: Subscription;\n    \n    constructor(public el: ElementRef, public terminalService: TerminalService) {\n        this.subscription = terminalService.responseHandler.subscribe(response => {\n            this.commands[this.commands.length - 1].response = response;\n            this.commandProcessed = true;\n        });\n    }\n    \n    ngAfterViewInit() {\n        this.container = DomHandler.find(this.el.nativeElement, '.p-terminal')[0];\n    }\n    \n    ngAfterViewChecked() {\n        if (this.commandProcessed) {\n            this.container.scrollTop = this.container.scrollHeight;\n            this.commandProcessed = false;\n        }\n    }\n                \n    @Input()\n    set response(value: string) {\n        if (value) {\n            this.commands[this.commands.length - 1].response = value;\n            this.commandProcessed = true;\n        }\n    }\n    \n    handleCommand(event: KeyboardEvent) {\n        if (event.keyCode == 13) {\n            this.commands.push({text: this.command});\n            this.terminalService.sendCommand(this.command);\n            this.command = '';\n        }\n    }\n    \n    focus(element: HTMLElement) {\n        element.focus();\n    }\n    \n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    \n}\n\n@NgModule({\n    imports: [CommonModule,FormsModule],\n    exports: [Terminal],\n    declarations: [Terminal]\n})\nexport class TerminalModule { }"]}