{"version":3,"file":"primeng-organizationchart.umd.js","sources":["ng:/primeng/organizationchart/organizationchart.ts"],"names":["Inject","forwardRef","ChangeDetectorRef","Component","trigger","state","style","transition","animate","ViewEncapsulation","ChangeDetectionStrategy","Input","EventEmitter","Subject","ElementRef","Output","ContentChildren","PrimeTemplate","NgModule","CommonModule","SharedModule"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,Input,Output,AfterContentInit,EventEmitter,TemplateRef,\n        Inject,forwardRef,ContentChildren,QueryList,ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, OnDestroy} from '@angular/core';\nimport {trigger,state,style,transition,animate} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {SharedModule} from 'primeng/api';\nimport {TreeNode} from 'primeng/api';\nimport {PrimeTemplate} from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\n\n@Component({\n    selector: '[pOrganizationChartNode]',\n    template: `\n        <tbody *ngIf=\"node\">\n            <tr>\n                <td [attr.colspan]=\"colspan\">\n                    <div [class]=\"node.styleClass\" [ngClass]=\"{'p-organizationchart-node-content': true, 'p-organizationchart-selectable-node': chart.selectionMode && node.selectable !== false,'p-highlight':isSelected()}\"\n                        (click)=\"onNodeClick($event,node)\">\n                        <div *ngIf=\"!chart.getTemplateForNode(node)\">{{node.label}}</div>\n                        <div *ngIf=\"chart.getTemplateForNode(node)\">\n                            <ng-container *ngTemplateOutlet=\"chart.getTemplateForNode(node); context: {$implicit: node}\"></ng-container>\n                        </div>\n                        <a *ngIf=\"!leaf\" tabindex=\"0\" class=\"p-node-toggler\" (click)=\"toggleNode($event, node)\" (keydown.enter)=\"toggleNode($event, node)\">\n                            <i class=\"p-node-toggler-icon pi\" [ngClass]=\"{'pi-chevron-down': node.expanded, 'pi-chevron-up': !node.expanded}\"></i>\n                        </a>\n                    </div>\n                </td>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-lines\" [@childState]=\"'in'\">\n                <td [attr.colspan]=\"colspan\">\n                    <div class=\"p-organizationchart-line-down\"></div>\n                </td>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-lines\" [@childState]=\"'in'\">\n                <ng-container *ngIf=\"node.children && node.children.length === 1\">\n                    <td [attr.colspan]=\"colspan\">\n                        <div class=\"p-organizationchart-line-down\"></div>\n                    </td>\n                </ng-container>\n                <ng-container *ngIf=\"node.children && node.children.length > 1\">\n                    <ng-template ngFor let-child [ngForOf]=\"node.children\" let-first=\"first\" let-last=\"last\">\n                        <td class=\"p-organizationchart-line-left\" [ngClass]=\"{'p-organizationchart-line-top':!first}\">&nbsp;</td>\n                        <td class=\"p-organizationchart-line-right\" [ngClass]=\"{'p-organizationchart-line-top':!last}\">&nbsp;</td>\n                    </ng-template>\n                </ng-container>\n            </tr>\n            <tr [ngClass]=\"!leaf&&node.expanded ? 'p-organizationchart-node-visible' : 'p-organizationchart-node-hidden'\" class=\"p-organizationchart-nodes\" [@childState]=\"'in'\">\n                <td *ngFor=\"let child of node.children\" colspan=\"2\">\n                    <table class=\"p-organizationchart-table\" pOrganizationChartNode [node]=\"child\"></table>\n                </td>\n            </tr>\n        </tbody>\n    `,\n    animations: [\n        trigger('childState', [\n            state('in', style({opacity: 1})),\n           transition('void => *', [\n             style({opacity: 0}),\n             animate(150)\n           ]),\n           transition('* => void', [\n             animate(150, style({opacity:0}))\n           ])\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./organizationchart.css']\n})\nexport class OrganizationChartNode implements OnDestroy{\n\n    @Input() node: TreeNode;\n        \n    @Input() root: boolean;\n    \n    @Input() first: boolean;\n    \n    @Input() last: boolean;\n\n    chart: OrganizationChart;\n\n    subscription: Subscription;\n        \n    constructor(@Inject(forwardRef(() => OrganizationChart)) chart, public cd: ChangeDetectorRef) {\n        this.chart = chart as OrganizationChart;\n        this.subscription = this.chart.selectionSource$.subscribe(() =>{\n            this.cd.markForCheck();\n        })\n    }\n                \n    get leaf(): boolean {\n        return this.node.leaf == false ? false : !(this.node.children&&this.node.children.length);\n    }\n    \n    get colspan() {\n        return (this.node.children && this.node.children.length) ? this.node.children.length * 2: null;\n    }\n    \n    onNodeClick(event: Event, node: TreeNode) {\n        this.chart.onNodeClick(event, node)\n    }\n    \n    toggleNode(event: Event, node: TreeNode) {\n        node.expanded = !node.expanded;\n        if (node.expanded)\n            this.chart.onNodeExpand.emit({originalEvent: event, node: this.node});\n        else\n            this.chart.onNodeCollapse.emit({originalEvent: event, node: this.node});\n            \n        event.preventDefault();\n    }\n    \n    isSelected() {\n        return this.chart.isSelected(this.node);\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n\n@Component({\n    selector: 'p-organizationChart',\n    template: `\n        <div [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"{'p-organizationchart p-component': true, 'p-organizationchart-preservespace': preserveSpace}\">\n            <table class=\"p-organizationchart-table\" pOrganizationChartNode [node]=\"root\" *ngIf=\"root\"></table>\n        </div>\n    `,\n   changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OrganizationChart implements AfterContentInit {\n            \n    @Input() value: TreeNode[];            \n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() selectionMode: string;\n    \n    @Input() preserveSpace: boolean = true;\n    \n    @Input()  get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val:any) {\n        this._selection = val;\n        \n        if (this.initialized)\n            this.selectionSource.next();\n    }\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    public templateMap: any;\n\n    private selectionSource = new Subject<any>();\n\n    _selection: any;\n\n    initialized: boolean;\n\n    selectionSource$ = this.selectionSource.asObservable();\n    \n    constructor(public el: ElementRef, public cd:ChangeDetectorRef) {}\n    \n    get root(): TreeNode {\n        return this.value && this.value.length ? this.value[0] : null;\n    }\n    \n    ngAfterContentInit() {\n        if (this.templates.length) {\n            this.templateMap = {};\n        }\n        \n        this.templates.forEach((item) => {\n            this.templateMap[item.getType()] = item.template;\n        });\n\n        this.initialized = true;\n    }\n    \n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\n        if (this.templateMap)\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\n        else\n            return null;\n    }\n    \n    onNodeClick(event: Event, node: TreeNode) {\n        let eventTarget = (<Element> event.target);\n        \n        if (eventTarget.className && (eventTarget.className.indexOf('p-node-toggler') !== -1 ||Â eventTarget.className.indexOf('p-node-toggler-icon') !== -1)) {\n            return;\n        }\n        else if (this.selectionMode) {\n            if (node.selectable === false) {\n                return;\n            }\n            \n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n            \n            if (this.selectionMode === 'single') {\n                if (selected) {\n                    this.selection = null;\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.selection = node;\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            else if (this.selectionMode === 'multiple') {\n                if (selected) {\n                    this.selection = this.selection.filter((val,i) => i!=index);\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.selection = [...this.selection||[],node];\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            \n            this.selectionChange.emit(this.selection);\n            this.selectionSource.next();\n        }\n    }\n    \n    findIndexInSelection(node: TreeNode) {\n        let index: number = -1;\n\n        if (this.selectionMode && this.selection) {\n            if (this.selectionMode === 'single') {\n                index = (this.selection == node) ? 0 : - 1;\n            }\n            else if (this.selectionMode === 'multiple') {\n                for(let i = 0; i  < this.selection.length; i++) {\n                    if (this.selection[i] == node) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    }\n    \n    isSelected(node: TreeNode) {\n        return this.findIndexInSelection(node) != -1;         \n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [OrganizationChart,SharedModule],\n    declarations: [OrganizationChart,OrganizationChartNode]\n})\nexport class OrganizationChartModule { }"]}