import { NgModule, Directive, ElementRef, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
export class CodeHighlighter {
    constructor(el) {
        this.el = el;
    }
    ngAfterViewInit() {
        if (window['Prism']) {
            window['Prism'].highlightElement(this.el.nativeElement);
        }
    }
}
CodeHighlighter.ɵfac = function CodeHighlighter_Factory(t) { return new (t || CodeHighlighter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
CodeHighlighter.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CodeHighlighter, selectors: [["", "pCode", ""]] });
CodeHighlighter.ctorParameters = () => [
    { type: ElementRef }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CodeHighlighter, [{
        type: Directive,
        args: [{
                selector: '[pCode]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();
CodeHighlighter.ctorParameters = () => [
    { type: ElementRef }
];
export class CodeHighlighterModule {
}
CodeHighlighterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CodeHighlighterModule });
CodeHighlighterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CodeHighlighterModule_Factory(t) { return new (t || CodeHighlighterModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CodeHighlighterModule, { declarations: function () { return [CodeHighlighter]; }, imports: function () { return [CommonModule]; }, exports: function () { return [CodeHighlighter]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CodeHighlighterModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [CodeHighlighter],
                declarations: [CodeHighlighter]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZWhpZ2hsaWdodGVyLmpzIiwic291cmNlcyI6WyJuZzovcHJpbWVuZy9jb2RlaGlnaGxpZ2h0ZXIvY29kZWhpZ2hsaWdodGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUsvQyxNQUFNLE9BQU8sZUFBZTtBQUFHLElBRTNCLFlBQW1CLEVBQWM7QUFBSSxRQUFsQixPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQUMsSUFBRyxDQUFDO0FBQzFDLElBQ0ksZUFBZTtBQUNuQixRQUFRLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFO0FBQzdCLFlBQVksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDcEUsU0FBUztBQUNULElBQUksQ0FBQztBQUNMOzsyR0FBQztBQUNEO0FBRTRCLFlBVkQsVUFBVTtBQUFHOzJDQUx2QyxTQUFTLFNBQUM7S0FDUCxRQUFRLEVBQUUsU0FBUzthQUN0Qjs7OzJFQUNJO0FBQUM7QUFBeUMsWUFOakIsVUFBVTtBQUFHO0FBc0IzQyxNQUFNLE9BQU8scUJBQXFCO0FBQUc7aURBTHBDLFFBQVEsU0FBQyxrQkFDTjtJQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsa0JBQ3ZCLE9BQU8sRUFBRSxDQUFDLGVBQWUsQ0FBQyxrQkFDMUIsWUFBWSxFQUFFLENBQUMsZUFBZSxDQUFDLGNBQ2xDOzs7Ozs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3BDb2RlXSdcbn0pXG5leHBvcnQgY2xhc3MgQ29kZUhpZ2hsaWdodGVyIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWw6IEVsZW1lbnRSZWYpIHsgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICBpZiAod2luZG93WydQcmlzbSddKSB7XG4gICAgICAgICAgICB3aW5kb3dbJ1ByaXNtJ10uaGlnaGxpZ2h0RWxlbWVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICAgIGV4cG9ydHM6IFtDb2RlSGlnaGxpZ2h0ZXJdLFxuICAgIGRlY2xhcmF0aW9uczogW0NvZGVIaWdobGlnaHRlcl1cbn0pXG5leHBvcnQgY2xhc3MgQ29kZUhpZ2hsaWdodGVyTW9kdWxlIHsgfVxuXG4iXX0=