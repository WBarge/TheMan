{"version":3,"file":"primeng-tristatecheckbox.js","sources":["ng:/primeng/tristatecheckbox/tristatecheckbox.ts","ng:/primeng/tristatecheckbox/primeng-tristatecheckbox.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TRISTATECHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TriStateCheckbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-triStateCheckbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-checkbox p-component': true,'p-checkbox-disabled': disabled, 'p-checkbox-focused': focused}\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\">\n            </div>\n            <div class=\"p-checkbox-box\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\n                [ngClass]=\"{'p-highlight':value!=null,'p-disabled':disabled,'p-focus':focused}\">\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':value==true,'pi-times':value==false}\"></span>\n            </div>\n        </div>\n        <label class=\"p-checkbox-label\" (click)=\"onClick($event,input)\"\n               [ngClass]=\"{'p-checkbox-label-active':value!=null, 'p-disabled':disabled, 'p-checkbox-label-focus':focused}\"\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TriStateCheckbox implements ControlValueAccessor  {\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    @Input() disabled: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() label: string;\n\n    @Input() readonly: boolean;\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    focused: boolean;\n\n    value: any;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    onClick(event: Event, input: HTMLInputElement) {\n        if (!this.disabled && !this.readonly) {\n            this.toggle(event);\n            this.focused = true;\n            input.focus();\n        }\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        if (event.keyCode == 32) {\n            event.preventDefault();\n        }\n    }\n\n    onKeyup(event: KeyboardEvent) {\n        if (event.keyCode == 32 && !this.readonly) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n\n    toggle(event: Event) {\n        if (this.value == null || this.value == undefined)\n            this.value = true;\n        else if (this.value == true)\n            this.value = false;\n        else if (this.value == false)\n            this.value = null;\n\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        })\n    }\n\n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n        this.onModelTouched();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n\n    setDisabledState(disabled: boolean): void {\n        this.disabled = disabled;\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [TriStateCheckbox],\n    declarations: [TriStateCheckbox]\n})\nexport class TriStateCheckboxModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}