{
  "_args": [
    [
      {
        "raw": "ngx-color-picker@4.5.3",
        "scope": null,
        "escapedName": "ngx-color-picker",
        "name": "ngx-color-picker",
        "rawSpec": "4.5.3",
        "spec": "4.5.3",
        "type": "version"
      },
      "E:\\DevUIArea\\angular-product-setup"
    ]
  ],
  "_from": "ngx-color-picker@4.5.3",
  "_id": "ngx-color-picker@4.5.3",
  "_inCache": true,
  "_location": "/ngx-color-picker",
  "_nodeVersion": "8.9.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ngx-color-picker-4.5.3.tgz_1513243501077_0.14017544500529766"
  },
  "_npmUser": {
    "name": "zefoy",
    "email": "devel@zef.fi"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ngx-color-picker@4.5.3",
    "scope": null,
    "escapedName": "ngx-color-picker",
    "name": "ngx-color-picker",
    "rawSpec": "4.5.3",
    "spec": "4.5.3",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngx-color-picker/-/ngx-color-picker-4.5.3.tgz",
  "_shasum": "0b54ff5cdd515cca4d79efb2117ee7cfc3f40748",
  "_shrinkwrap": null,
  "_spec": "ngx-color-picker@4.5.3",
  "_where": "E:\\DevUIArea\\angular-product-setup",
  "bugs": {
    "url": "https://github.com/zefoy/ngx-color-picker/issues"
  },
  "dependencies": {},
  "description": "Color picker widget for Angular (version 2 and newer)",
  "devDependencies": {
    "@angular/common": "^4.0.0",
    "@angular/compiler": "^4.0.0",
    "@angular/compiler-cli": "^4.0.0",
    "@angular/core": "^4.0.0",
    "@angular/platform-browser": "^4.0.0",
    "@types/node": "~6.0.0",
    "angular2-inline-template-style": "~1.0.0",
    "angular2-template-loader": "~0.6.0",
    "awesome-typescript-loader": "~3.2.0",
    "codelyzer": "^3.1.2",
    "core-js": "~2.4.0",
    "cpx": "~1.5.0",
    "node-sass": "~4.5.0",
    "raw-loader": "~0.5.0",
    "rxjs": "~5.4.0",
    "sass-loader": "~6.0.0",
    "string-replace-loader": "~1.1.0",
    "strip-sourcemap-loader": "~0.0.0",
    "stylelint": "~8.0.0",
    "stylelint-config-standard": "~17.0.0",
    "stylelint-order": "~0.6.0",
    "tslint": "~5.6.0",
    "typescript": "~2.4.0",
    "watch": "~1.0.0",
    "webpack": "~2.6.0",
    "zone.js": "~0.8.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-CJca1od05yf2j8OKUm5ar+mIVFB3n01+vbMpLeT+9/drKYCxgmtxxmmsgwWBNNXWYa2GNYB7PGH+mdKQkeypOg==",
    "shasum": "0b54ff5cdd515cca4d79efb2117ee7cfc3f40748",
    "tarball": "https://registry.npmjs.org/ngx-color-picker/-/ngx-color-picker-4.5.3.tgz"
  },
  "gitHead": "0feba96b8e762fbaf4b48a16487e9539711e416d",
  "homepage": "https://github.com/zefoy/ngx-color-picker#readme",
  "license": "MIT",
  "main": "bundles/ngx-color-picker.umd.js",
  "maintainers": [
    {
      "name": "zefoy",
      "email": "devel@zef.fi"
    }
  ],
  "module_ivy_ngcc": "__ivy_ngcc__/dist/index.js",
  "module": "./dist/index.js",
  "name": "ngx-color-picker",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": ">=2.0.0",
    "@angular/core": ">=2.0.0"
  },
  "readme": "# Angular Color Picker\n\n<a href=\"https://badge.fury.io/js/ngx-color-picker\"><img src=\"https://badge.fury.io/js/ngx-color-picker.svg\" align=\"right\" alt=\"npm version\" height=\"18\"></a>\n\nThis is an AOT compatible version with some additional features of the cool angular2-color-picker by Alberplz.\n\nIn future this library might merge with the angular2-color-picker or continue live as a separate library.\n\nSee a live example application <a href=\"https://zefoy.github.io/ngx-color-picker/\">here</a>.\n\n### Library building\n\n```bash\nnpm install\nnpm run build\nnpm run inline\n```\n\n### Library development\n\n```bash\nnpm link\ncd example\nnpm link ngx-color-picker\n```\n\n### Running the example\n\n```bash\ncd example\nnpm install\nnpm start\n\n(or 'npm run start:sjs' for using SystemJS)\n```\n\n### Installing and usage\n\n```bash\nnpm install ngx-color-picker@4.5.0 --save\n```\n\n##### Load the module for your app:\n\n```javascript\nimport { ColorPickerModule } from 'ngx-color-picker';\n\n@NgModule({\n  ...\n  imports: [\n    ...\n    ColorPickerModule\n  ]\n})\n```\n\n##### Use it in your HTML template:\n\n```html\n<input [(colorPicker)]=\"color\" [style.background]=\"color\"/>\n```\n\n```javascript\n[colorPicker]                // The color to show in the color picker dialog.\n\n[cpWidth]                    // Use this option to set color picker dialog width ('230px').\n[cpHeight]                   // Use this option to force color picker dialog height ('auto').\n\n[cpToggle]                   // Sets the default open / close state of the color picker (false).\n\n[cpOutputFormat]             // Output color format: 'hex', 'rgba', 'hsla' ('hex').\n[cpAlphaChannel]             // Alpha in output value: 'enabled', 'disabled', 'always' ('enabled').\n[cpFallbackColor]            // Is used when the color is not well-formed or is undefined ('#000').\n\n[cpPosition]                 // Dialog position: 'right', 'left', 'top', 'bottom' ('right').\n[cpPositionOffset]           // Dialog offset percentage relative to the directive element (0%).\n[cpPositionRelativeToArrow]  // Dialog position is calculated relative to dialog arrow (false).\n\n[cpPresetLabel]              // Label text for the preset colors if any provided ('Preset colors').\n[cpPresetColors]             // Array of preset colors to show in the color picker dialog ([]).\n\n[cpDialogDisplay]            // Dialog positioning mode: 'popup', 'inline' ('popup').\n                             //   popup: dialog is shown as popup (fixed positioning).\n                             //   inline: dialog is shown permanently (static positioning).\n\n[cpIgnoredElements]          // Array of HTML elements that will be ignored when clicked ([]).\n\n[cpSaveClickOutside]         // Save currently selected color when user clicks outside (true).\n\n[cpOKButton]                 // Show an OK / Apply button which saves the color (false).\n[cpOKButtonText]             // Button label text shown inside the OK / Apply button ('OK').\n[cpOKButtonClass]            // Additional class for customizing the OK / Apply button ('').\n\n[cpCancelButton]             // Show a Cancel / Reset button which resets the color (false).\n[cpCancelButtonText]         // Button label text shown inside the Cancel / Reset button ('Cancel').\n[cpCancelButtonClass]        // Additional class for customizing the Cancel / Reset button ('').\n\n[cpAddColorButton]           // Show an Add Color button which add the color into preset (false).\n[cpAddColorButtonText]       // Button label text shown inside the Add Color button ('Add color').\n[cpAddColorButtonClass]      // Additional class for customizing the Add Color button ('').\n\n[cpRemoveColorButtonClass]   // Additional class for customizing the Remove Color button ('').\n[cpMaxPresetColorsLength]    // Use this option to set the max colors allowed into preset panel (6: number).\n\n[cpPresetEmptyMessage]       // Message for empty colors if any provided used ('No colors added').\n[cpPresetEmptyMessageClass]  // Additional class for customizing the empty colors message ('').\n\n[cpUseRootViewContainer]     // Create dialog component in the root view container (false).\n                             // Note: The root component needs to have public viewContainerRef.\n\n(colorPickerChange)          // Changed color value, send when color is changed (value: string).\n(colorPickerCancel)          // Color select canceled, send when Cancel button is pressed (void).\n(colorPickerSelect)          // Selected color value, send when OK button is pressed (value: string).\n\n(cpToggleChange)             // Status of the dialog, send when dialog is opened / closed (open: boolean).\n\n(cpPresetColorsChange)       // Preset colors value, send when Add Color button is pressed (value: array).\n\n(cpInputChange)              // Input name and its value, send when user changes color through inputs\n                             //   ({input: string, value: number|string, color: string})\n\n(cpSliderChange)             // Slider name and its value, send when user changes color through slider\n(cpSliderDragEnd)            // Slider name and current color, send when slider dragging ends (mouseup,touchend)\n(cpSliderDragStart)          // Slider name and current color, send when slider dragging starts (mousedown,touchstart)\n                             //   ({slider: string, value: number|string, color: string})\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zefoy/ngx-color-picker.git"
  },
  "scripts": {
    "build": "npm run build:umd && npm run build:aot",
    "build:aot": "npm run build:js && npm run build:css && npm run build:html",
    "build:css": "node-sass src/ -o dist/ --source-map=true",
    "build:html": "cpx src/lib/*.html dist/lib/",
    "build:js": "ngc -p src/tsconfig.json",
    "build:umd": "webpack --config config/webpack.config.js",
    "clean": "rm -rf dist bundles node_modules",
    "deploy": "npm run build && npm run inline && npm publish",
    "init": "npm install",
    "inline": "ng2-inline --compress -b dist/lib/ -o ./ \"dist/lib/*.js\"",
    "lint": "npm run lint:js && npm run lint:scss",
    "lint:scss": "stylelint 'src/**/*.scss' --syntax scss",
    "lint:ts": "tslint 'src/**/*.ts'",
    "start": "npm run build",
    "watch": "watch 'npm run build' src/",
    "prepublishOnly": "node --eval \"console.error('ERROR: Trying to publish a package that has been compiled by NGCC. This is not allowed.\\nPlease delete and rebuild the package, without compiling with NGCC, before attempting to publish.\\nNote that NGCC may have been run by importing this package into another project that is being built with Ivy enabled.\\n')\" && exit 1"
  },
  "stylelint": {
    "extends": "./stylelint.json"
  },
  "tslint": {
    "extends": "./tslint.json"
  },
  "typings": "./dist/index.d.ts",
  "version": "4.5.3",
  "__processed_by_ivy_ngcc__": {
    "main": "9.1.12",
    "module": "9.1.12",
    "typings": "9.1.12"
  }
}
