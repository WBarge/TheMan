{
  "_args": [
    [
      {
        "raw": "json-parse-even-better-errors@^2.3.0",
        "scope": null,
        "escapedName": "json-parse-even-better-errors",
        "name": "json-parse-even-better-errors",
        "rawSpec": "^2.3.0",
        "spec": ">=2.3.0 <3.0.0",
        "type": "range"
      },
      "E:\\DevUIArea\\angular-product-setup\\node_modules\\read-package-json"
    ]
  ],
  "_from": "json-parse-even-better-errors@^2.3.0",
  "_hasShrinkwrap": false,
  "_id": "json-parse-even-better-errors@2.3.0",
  "_location": "/json-parse-even-better-errors",
  "_nodeVersion": "14.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/json-parse-even-better-errors_2.3.0_1597946575507_0.9568389077725838"
  },
  "_npmUser": {
    "name": "isaacs",
    "email": "i@izs.me"
  },
  "_npmVersion": "7.0.0-beta.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "json-parse-even-better-errors@^2.3.0",
    "scope": null,
    "escapedName": "json-parse-even-better-errors",
    "name": "json-parse-even-better-errors",
    "rawSpec": "^2.3.0",
    "spec": ">=2.3.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/read-package-json"
  ],
  "_resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.0.tgz",
  "_shasum": "371873c5ffa44304a6ba12419bcfa95f404ae081",
  "_shrinkwrap": null,
  "_spec": "json-parse-even-better-errors@^2.3.0",
  "_where": "E:\\DevUIArea\\angular-product-setup\\node_modules\\read-package-json",
  "author": {
    "name": "Kat MarchÃ¡n",
    "email": "kzm@zkat.tech"
  },
  "bugs": {
    "url": "https://github.com/npm/json-parse-even-better-errors/issues"
  },
  "dependencies": {},
  "description": "JSON.parse with context information on error",
  "devDependencies": {
    "tap": "^14.6.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-o3aP+RsWDJZayj1SbHNQAI8x0v3T3SKiGoZlNYfbUP1S3omJQ6i9CnqADqkSPaOAxwua4/1YWx5CM7oiChJt2Q==",
    "shasum": "371873c5ffa44304a6ba12419bcfa95f404ae081",
    "tarball": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.0.tgz",
    "fileCount": 5,
    "unpackedSize": 10119,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfPrrQCRA9TVsSAnZWagAAJAEP+gPHr1zmySw7YK2r8o0a\nn84wrKT34qIX6bIjWdbzpZZAMKpLnmU12x+YYfgHKw0EqMFK9hkmAcWpSzOY\nqo9bEpToJNOEa+yiamicM1D9tvk7vHBHAH0+JwT/lPOXUbiouxBmrUdJliiQ\nOQWy7XIB+TiASZgKHIfnybG1eR2dx0C7mFXNtLU+gzbd0lr2UHn/OLg0BTAS\ngpDZDFttV9nvD0BNogstbht5fSXRv68CB/uqnLGaoYnb37gHuiy377SqTkdW\nJVy7QxugPLv9QgFQhNRiEM2kvAzp6N6vXHkJ9ncZD46WumO3xkpHt5fcT7wK\nqa0xgj0+0tZfKjXoe0QPOfFP8GMv73u69GC6Jze3cKdX3oteIR9yN1iTVXq7\nJUwRLo8PyOn/BcEBVKcu9nu33Q/CzJdbcpgew8VSNq0q/m7jBOTkMhZhL96w\nKqWXVCEfXsDFNQ2yJIagnWac6Dg63MsmEL+biCIqfKoO/a4rd3DBmM7sHHbi\n57r+O4Zpd9JMWcbje2/ockDJKRZ55a/WIKprC6F4wDAdIZhlFoHk7q0YfI2k\nowCFpbUDjI14M8u+k5BbDD/WKw5Yt/QF+9Jun4S54ljhJJQpWcPipnACYvXE\nCefzJyoOBHQNlIsayS7rscEY6l/lyeiOchtytuNxktIwLbPDmAZKROR47qz+\nejWg\r\n=QOa/\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "*.js"
  ],
  "gitHead": "004d34c961d2763a5da34c803a973cb1dd34dc26",
  "homepage": "https://github.com/npm/json-parse-even-better-errors#readme",
  "keywords": [
    "JSON",
    "parser"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "adam_baldwin",
      "email": "evilpacket@gmail.com"
    },
    {
      "name": "claudiahdz",
      "email": "cghr1990@gmail.com"
    },
    {
      "name": "darcyclarke",
      "email": "darcy@darcyclarke.me"
    },
    {
      "name": "isaacs",
      "email": "i@izs.me"
    },
    {
      "name": "mylesborins",
      "email": "myles.borins@gmail.com"
    },
    {
      "name": "ruyadorno",
      "email": "ruyadorno@hotmail.com"
    }
  ],
  "name": "json-parse-even-better-errors",
  "optionalDependencies": {},
  "readme": "# json-parse-even-better-errors\n\n[`json-parse-even-better-errors`](https://github.com/npm/json-parse-even-better-errors)\nis a Node.js library for getting nicer errors out of `JSON.parse()`,\nincluding context and position of the parse errors.\n\nIt also preserves the newline and indentation styles of the JSON data, by\nputting them in the object or array in the `Symbol.for('indent')` and\n`Symbol.for('newline')` properties.\n\n## Install\n\n`$ npm install --save json-parse-even-better-errors`\n\n## Table of Contents\n\n* [Example](#example)\n* [Features](#features)\n* [Contributing](#contributing)\n* [API](#api)\n  * [`parse`](#parse)\n\n### Example\n\n```javascript\nconst parseJson = require('json-parse-even-better-errors')\n\nparseJson('\"foo\"') // returns the string 'foo'\nparseJson('garbage') // more useful error message\nparseJson.noExceptions('garbage') // returns undefined\n```\n\n### Features\n\n* Like JSON.parse, but the errors are better.\n* Strips a leading byte-order-mark that you sometimes get reading files.\n* Has a `noExceptions` method that returns undefined rather than throwing.\n* Attaches the newline character(s) used to the `Symbol.for('newline')`\n  property on objects and arrays.\n* Attaches the indentation character(s) used to the `Symbol.for('indent')`\n  property on objects and arrays.\n\n## Indentation\n\nTo preserve indentation when the file is saved back to disk, use\n`data[Symbol.for('indent')]` as the third argument to `JSON.stringify`, and\nif you want to preserve windows `\\r\\n` newlines, replace the `\\n` chars in\nthe string with `data[Symbol.for('newline')]`.\n\nFor example:\n\n```js\nconst txt = await readFile('./package.json', 'utf8')\nconst data = parseJsonEvenBetterErrors(txt)\nconst indent = Symbol.for('indent')\nconst newline = Symbol.for('newline')\n// .. do some stuff to the data ..\nconst string = JSON.stringify(data, null, data[indent]) + '\\n'\nconst eolFixed = data[newline] === '\\n' ? string\n  : string.replace(/\\n/g, data[newline])\nawait writeFile('./package.json', eolFixed)\n```\n\nIndentation is determined by looking at the whitespace between the initial\n`{` and `[` and the character that follows it.  If you have lots of weird\ninconsistent indentation, then it won't track that or give you any way to\npreserve it.  Whether this is a bug or a feature is debatable ;)\n\n### API\n\n#### <a name=\"parse\"></a> `parse(txt, reviver = null, context = 20)`\n\nWorks just like `JSON.parse`, but will include a bit more information when\nan error happens, and attaches a `Symbol.for('indent')` and\n`Symbol.for('newline')` on objects and arrays.  This throws a\n`JSONParseError`.\n\n#### <a name=\"parse\"></a> `parse.noExceptions(txt, reviver = null)`\n\nWorks just like `JSON.parse`, but will return `undefined` rather than\nthrowing an error.\n\n#### <a name=\"jsonparseerror\"></a> `class JSONParseError(er, text, context = 20, caller = null)`\n\nExtends the JavaScript `SyntaxError` class to parse the message and provide\nbetter metadata.\n\nPass in the error thrown by the built-in `JSON.parse`, and the text being\nparsed, and it'll parse out the bits needed to be helpful.\n\n`context` defaults to 20.\n\nSet a `caller` function to trim internal implementation details out of the\nstack trace.  When calling `parseJson`, this is set to the `parseJson`\nfunction.  If not set, then the constructor defaults to itself, so the\nstack trace will point to the spot where you call `new JSONParseError`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/json-parse-even-better-errors.git"
  },
  "scripts": {
    "postversion": "npm publish",
    "prepublishOnly": "git push --follow-tags",
    "preversion": "npm t",
    "snap": "tap",
    "test": "tap"
  },
  "tap": {
    "check-coverage": true
  },
  "version": "2.3.0"
}
