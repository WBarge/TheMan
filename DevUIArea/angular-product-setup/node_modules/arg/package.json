{
  "_args": [
    [
      {
        "raw": "arg@^4.1.0",
        "scope": null,
        "escapedName": "arg",
        "name": "arg",
        "rawSpec": "^4.1.0",
        "spec": ">=4.1.0 <5.0.0",
        "type": "range"
      },
      "E:\\DevUIArea\\angular-product-setup\\node_modules\\ts-node"
    ]
  ],
  "_from": "arg@^4.1.0",
  "_hasShrinkwrap": false,
  "_id": "arg@4.1.3",
  "_location": "/arg",
  "_nodeVersion": "10.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/arg_4.1.3_1580665994480_0.37399324996184813"
  },
  "_npmUser": {
    "name": "qix",
    "email": "i.am.qix@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "arg@^4.1.0",
    "scope": null,
    "escapedName": "arg",
    "name": "arg",
    "rawSpec": "^4.1.0",
    "spec": ">=4.1.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ts-node"
  ],
  "_resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
  "_shasum": "269fc7ad5b8e42cb63c896d5666017261c144089",
  "_shrinkwrap": null,
  "_spec": "arg@^4.1.0",
  "_where": "E:\\DevUIArea\\angular-product-setup\\node_modules\\ts-node",
  "author": {
    "name": "Josh Junon",
    "email": "junon@zeit.co"
  },
  "bugs": {
    "url": "https://github.com/zeit/arg/issues"
  },
  "dependencies": {},
  "description": "Another simple argument parser",
  "devDependencies": {
    "chai": "^4.1.1",
    "jest": "^20.0.4",
    "xo": "^0.18.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
    "shasum": "269fc7ad5b8e42cb63c896d5666017261c144089",
    "tarball": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
    "fileCount": 5,
    "unpackedSize": 12901,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeNwyLCRA9TVsSAnZWagAACRwQAKPjS4mhwNPdU2Ayqtm8\nD9id8za+eqWYJEFbo+cz9MpWCDeCf5/2dyD43mei4XYqDCUeKfhxVffG2PXn\n+vj3SrrZybw/blI3Ut6dmCu8/FZmAgSNTotTytiAe/qxf1A2mLqVTHZ+sTZN\nZkpwnYJUDaFStIWRBWwKkrg5RHK2hQOpqz7b7mRfUgYCI+Fmf3n9sDlu8lpv\nuxuvgzO8sM+BGhKjD7kmcalN/oGf+CkaznY7kpaljWohqq5TdgUyK3MN8p8J\nLrU82+pZYL+jRDy0SHclXm6eisIxygAqojkM+mttrhKvzEfcoDyX6jIQ+Yxn\nmOGMhtHCMh9M7HHpfRdaxx6HKaulS0TlhukovtseW1+8Xulb1ou80zr5lSGf\nngo+aHDmMtPEnsL5JIaXWlre4lK1aG+p+ph6D3QIRUM0szSbVGW4XMnSSfvb\nS0LCrF+P6uMYJRlRmZO4IzWX5W4uh2ec7CsIyQ8A0xWH6iGfiXTfpT5Q7fu7\nic08I52ZSah7/HyXWUeV1uBBOSY5rBLcg8/3bEA4/XZKZZ3CxOfQHYincDSh\nZXclF4tfx8dctSDpzy5WonzfD5ijtr50sNJmuH2WNaPYNnrd5M2O6uDjsJps\nUtjPeswz7UEokLsneYI65EWedeL5D55V70J6BYPu1wst9SokL+fatsfonjwc\nm7eU\r\n=+xEG\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js",
    "index.d.ts"
  ],
  "gitHead": "3ce0a32c783e47cca1c549ded84b48347bc5d4be",
  "homepage": "https://github.com/zeit/arg#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "alexaltea",
      "email": "alexandro@phi.nz"
    },
    {
      "name": "anatrajkovska",
      "email": "ana.trajkovska2015@gmail.com"
    },
    {
      "name": "andybitz",
      "email": "artzbitz@gmail.com"
    },
    {
      "name": "arunoda",
      "email": "arunoda.susiripala@gmail.com"
    },
    {
      "name": "arzafran",
      "email": "franco@basement.studio"
    },
    {
      "name": "atcastle",
      "email": "atcastle@gmail.com"
    },
    {
      "name": "caarlos0",
      "email": "caarlos0@gmail.com"
    },
    {
      "name": "chibicode",
      "email": "shu@chibicode.com"
    },
    {
      "name": "cleishm",
      "email": "chris@leishman.org"
    },
    {
      "name": "codetheory",
      "email": "thecodetheory@gmail.com"
    },
    {
      "name": "coetry",
      "email": "allenhai03@gmail.com"
    },
    {
      "name": "dav-is",
      "email": "mail@connordav.is"
    },
    {
      "name": "developit",
      "email": "jason@developit.ca"
    },
    {
      "name": "fivepointseven",
      "email": "fivepointseven@icloud.com"
    },
    {
      "name": "gielcobben",
      "email": "g.cobben@gmail.com"
    },
    {
      "name": "gmonaco",
      "email": "gbmonaco@google.com"
    },
    {
      "name": "guybedford",
      "email": "guybedford@gmail.com"
    },
    {
      "name": "housseindjirdeh",
      "email": "houssein.djirdeh@gmail.com"
    },
    {
      "name": "iamevilrabbit",
      "email": "hello@evilrabb.it"
    },
    {
      "name": "igorklopov",
      "email": "igor@klopov.com"
    },
    {
      "name": "ijjk",
      "email": "jj@jjsweb.site"
    },
    {
      "name": "janicklas-ralph",
      "email": "janicklasralph036@gmail.com"
    },
    {
      "name": "jaredpalmer",
      "email": "jared@palmer.net"
    },
    {
      "name": "javivelasco",
      "email": "javier.velasco86@gmail.com"
    },
    {
      "name": "jkrems",
      "email": "jan.krems@gmail.com"
    },
    {
      "name": "joecohens",
      "email": "joecohenr@gmail.com"
    },
    {
      "name": "juancampa",
      "email": "juancampa@gmail.com"
    },
    {
      "name": "keanulee",
      "email": "npm@keanulee.com"
    },
    {
      "name": "kikobeats",
      "email": "josefrancisco.verdu@gmail.com"
    },
    {
      "name": "leo",
      "email": "mindrun@icloud.com"
    },
    {
      "name": "lfades",
      "email": "luisito453@gmail.com"
    },
    {
      "name": "lucleray",
      "email": "luc.leray@gmail.com"
    },
    {
      "name": "manovotny",
      "email": "manovotny@gmail.com"
    },
    {
      "name": "marcosnils",
      "email": "marcosnils@gmail.com"
    },
    {
      "name": "matheuss",
      "email": "me@matheus.top"
    },
    {
      "name": "mfix22",
      "email": "mrfix84@gmail.com"
    },
    {
      "name": "mglagola",
      "email": "mark.glagola@gmail.com"
    },
    {
      "name": "msweeneydev",
      "email": "mail@msweeneydev.com"
    },
    {
      "name": "nkzawa",
      "email": "naoyuki.kanezawa@gmail.com"
    },
    {
      "name": "paco",
      "email": "pvco.coursey@gmail.com"
    },
    {
      "name": "paulogdm",
      "email": "paulogdemitri@gmail.com"
    },
    {
      "name": "prateekbh",
      "email": "prateek89born@gmail.com"
    },
    {
      "name": "qix",
      "email": "i.am.qix@gmail.com"
    },
    {
      "name": "quietshu",
      "email": "ds303077135@gmail.com"
    },
    {
      "name": "rabaut",
      "email": "rabautse@gmail.com"
    },
    {
      "name": "ragojose",
      "email": "ragojosefrancisco@gmail.com"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "sarupbanskota",
      "email": "sbanskota08@gmail.com"
    },
    {
      "name": "skllcrn",
      "email": "skllcrn@zeit.co"
    },
    {
      "name": "spanicker",
      "email": "shubhie@gmail.com"
    },
    {
      "name": "styfle",
      "email": "steven@ceriously.com"
    },
    {
      "name": "timer",
      "email": "timer150@gmail.com"
    },
    {
      "name": "timneutkens",
      "email": "tim@timneutkens.nl"
    },
    {
      "name": "tootallnate",
      "email": "nathan@tootallnate.net"
    },
    {
      "name": "umegaya",
      "email": "iyatomi@gmail.com"
    },
    {
      "name": "williamli",
      "email": "williamli@bbi.io"
    },
    {
      "name": "zeit-bot",
      "email": "team@zeit.co"
    }
  ],
  "name": "arg",
  "optionalDependencies": {},
  "readme": "# Arg [![CircleCI](https://circleci.com/gh/zeit/arg.svg?style=svg)](https://circleci.com/gh/zeit/arg)\n\n`arg` is yet another command line option parser.\n\n## Installation\n\nUse Yarn or NPM to install.\n\n```console\n$ yarn add arg\n```\n\nor\n\n```console\n$ npm install arg\n```\n\n## Usage\n\n`arg()` takes either 1 or 2 arguments:\n\n1. Command line specification object (see below)\n2. Parse options (_Optional_, defaults to `{permissive: false, argv: process.argv.slice(2), stopAtPositional: false}`)\n\nIt returns an object with any values present on the command-line (missing options are thus\nmissing from the resulting object). Arg performs no validation/requirement checking - we\nleave that up to the application.\n\nAll parameters that aren't consumed by options (commonly referred to as \"extra\" parameters)\nare added to `result._`, which is _always_ an array (even if no extra parameters are passed,\nin which case an empty array is returned).\n\n```javascript\nconst arg = require('arg');\n\n// `options` is an optional parameter\nconst args = arg(spec, options = {permissive: false, argv: process.argv.slice(2)});\n```\n\nFor example:\n\n```console\n$ node ./hello.js --verbose -vvv --port=1234 -n 'My name' foo bar --tag qux --tag=qix -- --foobar\n```\n\n```javascript\n// hello.js\nconst arg = require('arg');\n\nconst args = arg({\n\t// Types\n\t'--help':    Boolean,\n\t'--version': Boolean,\n\t'--verbose': arg.COUNT,   // Counts the number of times --verbose is passed\n\t'--port':    Number,      // --port <number> or --port=<number>\n\t'--name':    String,      // --name <string> or --name=<string>\n\t'--tag':     [String],    // --tag <string> or --tag=<string>\n\n\t// Aliases\n\t'-v':        '--verbose',\n\t'-n':        '--name',    // -n <string>; result is stored in --name\n\t'--label':   '--name'     // --label <string> or --label=<string>;\n\t                          //     result is stored in --name\n});\n\nconsole.log(args);\n/*\n{\n\t_: [\"foo\", \"bar\", \"--foobar\"],\n\t'--port': 1234,\n\t'--verbose': 4,\n\t'--name': \"My name\",\n\t'--tag': [\"qux\", \"qix\"]\n}\n*/\n```\n\nThe values for each key=&gt;value pair is either a type (function or [function]) or a string (indicating an alias).\n\n- In the case of a function, the string value of the argument's value is passed to it,\n  and the return value is used as the ultimate value.\n\n- In the case of an array, the only element _must_ be a type function. Array types indicate\n  that the argument may be passed multiple times, and as such the resulting value in the returned\n  object is an array with all of the values that were passed using the specified flag.\n\n- In the case of a string, an alias is established. If a flag is passed that matches the _key_,\n  then the _value_ is substituted in its place.\n\nType functions are passed three arguments:\n\n1. The parameter value (always a string)\n2. The parameter name (e.g. `--label`)\n3. The previous value for the destination (useful for reduce-like operations or for supporting `-v` multiple times, etc.)\n\nThis means the built-in `String`, `Number`, and `Boolean` type constructors \"just work\" as type functions.\n\nNote that `Boolean` and `[Boolean]` have special treatment - an option argument is _not_ consumed or passed, but instead `true` is\nreturned. These options are called \"flags\".\n\nFor custom handlers that wish to behave as flags, you may pass the function through `arg.flag()`:\n\n```javascript\nconst arg = require('arg');\n\nconst argv = ['--foo', 'bar', '-ff', 'baz', '--foo', '--foo', 'qux', '-fff', 'qix'];\n\nfunction myHandler(value, argName, previousValue) {\n\t/* `value` is always `true` */\n\treturn 'na ' + (previousValue || 'batman!');\n}\n\nconst args = arg({\n\t'--foo': arg.flag(myHandler),\n\t'-f': '--foo'\n}, {\n\targv\n});\n\nconsole.log(args);\n/*\n{\n\t_: ['bar', 'baz', 'qux', 'qix'],\n\t'--foo': 'na na na na na na na na batman!'\n}\n*/\n```\n\nAs well, `arg` supplies a helper argument handler called `arg.COUNT`, which equivalent to a `[Boolean]` argument's `.length`\nproperty - effectively counting the number of times the boolean flag, denoted by the key, is passed on the command line..\nFor example, this is how you could implement `ssh`'s multiple levels of verbosity (`-vvvv` being the most verbose).\n\n```javascript\nconst arg = require('arg');\n\nconst argv = ['-AAAA', '-BBBB'];\n\nconst args = arg({\n\t'-A': arg.COUNT,\n\t'-B': [Boolean]\n}, {\n\targv\n});\n\nconsole.log(args);\n/*\n{\n\t_: [],\n\t'-A': 4,\n\t'-B': [true, true, true, true]\n}\n*/\n```\n\n### Options\n\nIf a second parameter is specified and is an object, it specifies parsing options to modify the behavior of `arg()`.\n\n#### `argv`\n\nIf you have already sliced or generated a number of raw arguments to be parsed (as opposed to letting `arg`\nslice them from `process.argv`) you may specify them in the `argv` option.\n\nFor example:\n\n```javascript\nconst args = arg(\n\t{\n\t\t'--foo': String\n\t}, {\n\t\targv: ['hello', '--foo', 'world']\n\t}\n);\n```\n\nresults in:\n\n```javascript\nconst args = {\n\t_: ['hello'],\n\t'--foo': 'world'\n};\n```\n\n#### `permissive`\n\nWhen `permissive` set to `true`, `arg` will push any unknown arguments\nonto the \"extra\" argument array (`result._`) instead of throwing an error about\nan unknown flag.\n\nFor example:\n\n```javascript\nconst arg = require('arg');\n\nconst argv = ['--foo', 'hello', '--qux', 'qix', '--bar', '12345', 'hello again'];\n\nconst args = arg(\n\t{\n\t\t'--foo': String,\n\t\t'--bar': Number\n\t}, {\n\t\targv,\n\t\tpermissive: true\n\t}\n);\n```\n\nresults in:\n\n```javascript\nconst args = {\n\t_:          ['--qux', 'qix', 'hello again'],\n\t'--foo':    'hello',\n\t'--bar':    12345\n}\n```\n\n#### `stopAtPositional`\n\nWhen `stopAtPositional` is set to `true`, `arg` will halt parsing at the first\npositional argument.\n\nFor example:\n\n```javascript\nconst arg = require('arg');\n\nconst argv = ['--foo', 'hello', '--bar'];\n\nconst args = arg(\n\t{\n\t\t'--foo': Boolean,\n\t\t'--bar': Boolean\n\t}, {\n\t\targv,\n\t\tstopAtPositional: true\n\t}\n);\n```\n\nresults in:\n\n```javascript\nconst args = {\n\t_: ['hello', '--bar'],\n\t'--foo': true\n};\n```\n\n### Errors\n\nSome errors that `arg` throws provide a `.code` property in order to aid in recovering from user error, or to\ndifferentiate between user error and developer error (bug).\n\n##### ARG_UNKNOWN_OPTION\n\nIf an unknown option (not defined in the spec object) is passed, an error with code `ARG_UNKNOWN_OPTION` will be thrown:\n```js\n// cli.js\ntry {\n  require('arg')({ '--hi': String });\n} catch (err) {\n  if (err.code === 'ARG_UNKNOWN_OPTION') {\n    console.log(err.message);\n  } else {\n    throw err;\n  }\n}\n```\n\n```shell\nnode cli.js --extraneous true\nUnknown or unexpected option: --extraneous\n```\n\n# License\n\nCopyright &copy; 2017-2019 by ZEIT, Inc. Released under the [MIT License](LICENSE.md).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zeit/arg.git"
  },
  "scripts": {
    "pretest": "xo",
    "test": "WARN_EXIT=1 jest --coverage -w 2"
  },
  "types": "index.d.ts",
  "version": "4.1.3",
  "xo": {
    "rules": {
      "complexity": 0,
      "max-depth": 0,
      "no-div-regex": 0
    }
  }
}
